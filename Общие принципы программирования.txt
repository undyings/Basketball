
Общие принципы программирования

Главным и единственным принципом программирования является принцип минимума сущностей. Этот принцип
можно переформулировать в виде бритвы Оккама:

  "Не следует привлекать новые сущности без самой крайней на то необходимости"
  
Все остальные принципы программирования вытекают (являются частными случаями) этого главного принципа.

Самые дорогие сущности это абстрактные слои и модификации состояния (сеттеры). Лишние сущности
этих типов нужно устранять в первую очередь. Для минимизации количества модификаций состояний 
используется геттерный подход.


1) Двойственность дублирования. Одной из наиболее часто встречающихся лишних сущностей 
является дублирование кода.

Дублирование кода это плохо. Однако при борьбе с ним не следует забывать, что дублирование
кода бывает двух видов:
  
  1. Логическое дублирование
  
    Например, нам нужно вывести сливы топлива и в отчет, и в форму. Сливы рассчитываются на основе
    временной последовательности данных по топливу. Мы можем записать алгоритм расчета сливов дважды -
    один раз в отчете и один раз в форме. Почему такое дублирование это очень плохо? По той причине,
    что логически в отчете и в форме должно выводится одни и те же значения сливов. Соответственно
    если алгоритм расчета сливов изменится мы гарантированно должны будем изменить код в двух местах -
    и в отчете, и в форме.
    
    Т.е. при логическом дублировании одно и тоже значение выводится в нескольких местах. Такое
    дублирование безусловное зло и его нужно не допускать и немедленно устранять, если оно возникло.
    
  2. Физическое дублирование
  
    Например, есть два вида устройств с похожими протоколами. Соответственно парсеры этих протоколов
    также будут похожи и есть соблазн использовать один и тот же парсер для обоих устройств.
    Однако завтра протокол первого вида устройств может измениться, при этом естеcтвенно
    протокол второго вида устройств останется прежним. Если мы использовали один и тот же парсер
    для обоих устройств, то окажемся в ситуации, когда мы меняя парсер первого устройства вынуждены
    изменять и парсер второго устройства тоже, хотя это не требуется. Соответственно это резко
    усложняет решение задачи и чревато внесением ошибок в работу парсера второго устройства.
    
    Т.е. при физическом дублировании результат логически различен, а совпадает (полностью или частично)
    только способ получения результата на данном этапе и завтра способы получения результата
    могут измениться независимо друг от друга. При физическом дублировании дублирование кода в
    общем-то благо.
    
2) Чистые функции как строительные кирпичики программирования

  Для того, чтобы избежать дублирования кода нужно повторно использовать код. Общепринятым способом
  повторного использования кода является вынесение кода в методы экземпляра класса. Однако этот
  способ на практике работает плохо, т.к. функциональность жестко привязывается к состоянию
  экземпляра класса, которое, как правило, избыточно для конкретной функции. 
  
  Например, мы пишем класс textBox, его состояние очень жирное и скорей всего составляет десятки полей.
  В textBox'е нам нужна функция, которая по координатам пикселя на экране возвращает позицию символа
  в тексте (например, для того чтобы при клике пользователя выбрать нужную букву). Для работы этой
  функции достаточно границ текстовой области контрола, текста контрола, позиции первой видимой буквы,
  шрифта текста и координат экранного пикселя. Все остальное состояние textBox для работы этой
  функции не нужно. Если мы завтра в каком-то другом месте встретимся с такой же задачей, то
  весьма вероятно, что в том месте у нас будут и границы текстовой области, и текст, и позиция
  первой видимой буквы, и шрифт текста, и координаты экранного пикселя, но естественно не будет
  состояния еще десятков полей, которые не нужны для этой функции, но нужны для работы textBox.
  Соответственно даже если мы эту функцию вынесли в публичный интерфейс textBox повторно использовать
  ее в другом месте мы не сможем.
  
  Эту проблему решает вынесение функциональности в чистые функции.
  
  Чистые функции оформляются как статические и имеют право обращаться только к аргументам
  функции. К статическим переменным им обращаться запрещено. Чистые функции бывают двух типов:
  
  а) Не меняющие состояния. Такие чистые функции возвращают результат своей работы в виде 
    существующего или нового объекта. Например:
    
    public static GPSPoint TrackHlp.GetPrevGpsPoint(IList<GPSPoint> gpsPoints, DateTime localTime);
    
    Эта функция не меняет состояния ни gpsPoints, ни localTime, а возвращает либо один из
    существующих элементов из gpsPoints, либо если подходящего элемента нет, то возвращает
    null (т.е. по сути создает новый объект).
    
  б) Изменяющие состояние одного из аргументов. Это изменение обязательно должно быть
    отражено в названии. Например:
    
    public static void TrafficHlp.CreateTableForObjects(IDataLayer dbConnection);
    
    Эта функция изменяет состояние переданного аргумента (базы данных), что явным образом
    отражено в названии (Create).
    
  Чистые функции не требуют избыточного состояния для своей работы, поэтому возможности по
  их повторному использованию много выше, чем при использовании методов класса. Также код построенный
  на чистых функциях много проще читать, т.к. по нему сразу видно к какому состоянию происходит
  обращение и какое состояние изменяется в результате работы кода.
  
  
3) Объектное программирование

  Объектное программирование является одним из мощных приемов уменьшения количества сущностей в коде.
  В частности в виде применения паттернов проектирования Фасад, Адаптер, Стратегия, Бридж.
  Однако методы объектов должны содержать минимум кода и являться лишь обертками над чистыми функциями.
  
  Также, как правило, недопустимо наследование от реализации, т.к. это приводит к работе с
  избыточным состоянием, а также резко усложняет задачу разделения логического и физического 
  дублирования.